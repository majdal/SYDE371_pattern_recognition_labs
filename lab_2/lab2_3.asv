close all;
clear all;

load('lab2_3.mat');

<<<<<<< HEAD
clA = featureclass(a, 'r');
clB = featureclass(b, 'b');

clA.mu = l2functions.calcMean(clA);
clB.mu = l2functions.calcMean(clB);

protA = clA.Cluster(randi(length(clA.Cluster(:,1)),1),:);
protB = clB.Cluster(randi(length(clB.Cluster(:,1)),1),:); 

%n_points = 200;
xDim = -5:1:20;
yDim = 20:-1:5;
[x, y] = meshgrid(xDim,yDim);

MED_boundary = l2functions.MEDBoundary2(x, y, clA, clB);

MED_discA = l2functions.MEDdiscriminant(protA, protB, clA, clB);

error = l2functions.error(MED_discA);
=======
%load data points into class
clA = featureclass(a, 'r');
clB = featureclass(b, 'b');

%calculate mean of data set points for MED
clA.mu = l2functions.calcMean(clA);
clB.mu = l2functions.calcMean(clB);

naB = 1;
nbA = 1;
j = 1;

%-----to be repeated until naB = nbA = 0, then reiterate to find new suitable
%disc
while naB ~= 0 && nbA ~= 0
%randomly pick prototype
protA = clA.Cluster(randi(length(clA.Cluster(:,1)),1),:);
protB = clB.Cluster(randi(length(clB.Cluster(:,1)),1),:); 

MED_discA = l2functions.MEDdiscriminant(protA, protB, clA, clB);

%error = l2functions.error(MED_discA);

confMat= l2functions.confusionMat1(MED_discA);
naB = confMat(1);
nbA = confMat(2);
end

>>>>>>> 2f4a35b6d7b19977f6d783b258fb0a483424645a

figure
l2functions.plotdata(clA); hold on; l2functions.plotdata(clB);





